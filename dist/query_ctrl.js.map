{"version":3,"sources":["../src/query_ctrl.js"],"names":["_","QueryCtrl","ALL_OPERATORS","DEFAULT_DEVICE","DEFAULT_GROUP_BY","DEFAULT_GROUP_BY_OP","DEFAULT_SELECT_FIELD","DEFAULT_SELECT_NS","DEFAULT_WHERE","GenericDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","target","namespace","device_id","group_by_field","group_by_operator","interval","panelCtrl","wheres","newPlusButton","rowIdx","field","newSegment","cssClass","del","html","type","button","push","segment","idx","value","addWhereRow","splice","refresh","Promise","datasource","fieldQuery","then","transformToSegments","namespaceQuery","deviceQuery","operators","resolve","reject","map","v","text","rawQuery","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import _ from \"lodash\";\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\nimport {\n    ALL_OPERATORS,\n    DEFAULT_DEVICE,\n    DEFAULT_GROUP_BY,\n    DEFAULT_GROUP_BY_OP,\n    DEFAULT_SELECT_FIELD,\n    DEFAULT_SELECT_NS,\n    DEFAULT_WHERE\n} from \"./constants\";\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector, uiSegmentSrv)  {\n        super($scope, $injector);\n\n        this.scope = $scope;\n        this.uiSegmentSrv = uiSegmentSrv;\n        this.target.target = this.target.target || DEFAULT_SELECT_FIELD;\n        this.target.namespace = this.target.namespace || DEFAULT_SELECT_NS;\n        this.target.device_id = this.target.device_id || DEFAULT_DEVICE;\n        this.target.group_by_field = this.target.group_by_field || DEFAULT_GROUP_BY;\n        this.target.group_by_operator = this.target.group_by_operator || DEFAULT_GROUP_BY_OP;\n        this.target.interval = this.target.interval || this.panelCtrl.interval;\n\n        this.wheres = this.wheres || [[this.uiSegmentSrv.newPlusButton()]];\n        this.target.wheres = this.wheres;\n    }\n\n    /** Add a new where row to the UI, pushing down the plus button **/\n    addWhereRow(rowIdx) {\n        const field = this.uiSegmentSrv.newSegment(DEFAULT_WHERE);\n        field.cssClass = \"io-segment io-where-clause\";\n        const del = this.uiSegmentSrv.newSegment(\"\");\n        del.html = \"<i class=\\\"fa fa-trash\\\"></i>\";\n        del.type = \"delete\";\n        del.cssClass = \"io-segment\";\n        const button = this.uiSegmentSrv.newPlusButton();\n        button.cssClass = \"io-segment-no-left\";\n\n        this.wheres[rowIdx] = [field, del];\n        this.wheres.push([button]);\n    }\n\n    wheresClicked(segment, rowIdx, idx) {\n        // Handle plus button clicks\n        if (segment.type === \"plus-button\") {\n            // Only add a row if the previous one is non-empty clause\n            if (rowIdx === 0 || this.wheres[rowIdx - 1][0].value !== DEFAULT_WHERE) {\n                this.addWhereRow(rowIdx);\n            } else {  // Prevents user from 'editting' the button\n                this.wheres[rowIdx][idx] = this.uiSegmentSrv.newPlusButton();\n            }\n        } else if (segment.type === \"delete\") {  // Handle delete clicks\n            this.wheres.splice(rowIdx, 1);\n            this.panelCtrl.refresh();\n        }\n        return new Promise(() => {});\n    }\n\n    wheresUpdated(segment, rowIdx, idx) {\n        this.panelCtrl.refresh();\n    }\n\n    // No options for clicking on interval, just a text field.\n    intervalClicked() {\n        return new Promise(() => {});\n    }\n\n    getOptions() {\n        return this.datasource.fieldQuery(this.target)\n            .then(this.uiSegmentSrv.transformToSegments(false));\n    }\n\n    getNamespaces() {\n        return this.datasource.namespaceQuery(this.target)\n            .then(this.uiSegmentSrv.transformToSegments(false));\n    }\n\n    getDevices() {\n        return this.datasource.deviceQuery(this.target)\n            .then(this.uiSegmentSrv.transformToSegments(false));\n    }\n\n    getOperators() {\n        const operators = [\"mean\", \"max\", \"min\", \"sum\", \"count\"];\n        return new Promise((resolve, reject) => {\n            resolve(ALL_OPERATORS.map((v) => {\n                return {text: v, value: v};\n            }));\n        }).then(this.uiSegmentSrv.transformToSegments(false));\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery = !this.target.rawQuery;\n    }\n\n    onChangeInternal() {\n        this.panelCtrl.refresh(); // Asks the panel to refresh data.\n    }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}