{"version":3,"sources":["../src/datasource.js"],"names":["buildDataUrl","ns","field","DATA_URL","buildUrlQueryStr","params","keys","Object","ret","sep","i","length","k","vals","Array","v","encodeURIComponent","buildGroupByParam","t","interval","group_by","operator","DEFAULT_GROUP_BY","findFieldIdx","fields","indexOf","_","ALL_DEVICES","DEFAULT_DEVICE","DEFAULT_SELECT_FIELD","DEFAULT_SELECT_NS","DEFAULT_WHERE","NAMESPACES_URL","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","jsonData","pid","parseInt","iobeam_project_id","token","iobeam_project_token","q","headers","results","filteredResult","resultMap","Map","device","result","status","data","values","fieldIdx","f","j","row","time","val","temp","slice","splice","extra","concat","join","mapKey","pts","has","get","push","set","forEach","sorted","sort","a","b","target","datapoints","options","console","log","query","buildQueryParameters","targets","filter","hide","when","reqs","req","device_id","queryParams","limit","maxDataPoints","range","from","toDate","getTime","to","where","wheres","assign","namespace","makeDataSourceRequest","method","resps","intermdiateFn","parseQueryResults","shift","datasourceRequest","then","response","message","title","localeCompare","unshift","map","text","value","namespaces","namespace_name","group_by_field","group_by_operator","replace","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {\n    ALL_DEVICES,\n    DEFAULT_DEVICE,\n    DEFAULT_GROUP_BY,\n    DEFAULT_SELECT_FIELD,\n    DEFAULT_SELECT_NS,\n    DEFAULT_WHERE\n} from \"./constants\";\n\nconst DATA_URL = \"/v1/data/\";\nconst NAMESPACES_URL = \"/v1/namespaces/\";\n\n/** Build string representing iobeam /data endpoint **/\nfunction buildDataUrl(ns, field = \"all\") {\n    return DATA_URL + ns + \"/\" + field;\n}\n\n/**\n * Build string representing the query string from a map of params.\n *\n * params {object} - Key-value pairings to encode. If a value is a string,\n *                  a single copy of the key is added with that value. If it is\n *                  an array, multiple copies of that key are added for each\n *                  value.\n **/\nfunction buildUrlQueryStr(params) {\n    const keys = Object.keys(params);\n    let ret = \"\";\n    let sep = \"?\";\n    for (let i = 0; i < keys.length; i++) {\n        const k = keys[i];\n\n        let vals;\n        if (params[k] instanceof Array) {\n            vals = params[k]\n        } else if (params[k]) {\n            vals = [params[k]];\n        } else {\n            continue;\n        }\n\n        for (let v of vals) {\n            ret += sep + encodeURIComponent(k) + \"=\" + encodeURIComponent(v);\n            sep = \"&\"\n        }\n    }\n\n    return ret;\n}\n\nfunction buildGroupByParam(t, interval) {\n    const ret = {};\n    if (interval) {\n        ret.group_by = \"time(\" + interval + \")\";\n        ret.operator = \"mean\";\n    }\n\n    if (t.group_by) {\n        if (t.group_by.field !== DEFAULT_GROUP_BY) {\n            if (ret.group_by) {\n                ret.group_by += \",\";\n            }\n            ret.group_by += t.group_by.field;\n        }\n        ret.operator = t.group_by.operator;\n    }\n\n    return ret;\n}\n\n/**\n * Used to find which element in fields corresponds to field, by looking\n * for field as a substring so it matches things like 'avg(field)' as well\n * 'field'.\n *\n * fields {array} - Array of fields to search in\n * field {string} - Substring to search for\n **/\nfunction findFieldIdx(fields, field) {\n    for (let i = 0; i < fields.length; i++) {\n        if (fields[i].indexOf(field) > -1) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        if (instanceSettings.jsonData) {\n            this.pid = parseInt(instanceSettings.jsonData.iobeam_project_id);\n            this.token = instanceSettings.jsonData.iobeam_project_token;\n        }\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n\n        this.headers = {\n            \"Accept-Type\": \"application/json\",\n            \"Authorization\": \"Bearer \" + this.token\n        };\n    }\n\n    /**\n     * Parse each query result and create a single datasource response that\n     * Grafana expects.\n     *\n     * results {array} - An array of objects of the form {device: ..., result: ...}\n     * which contains the http result for a given device.\n     **/\n    parseQueryResults(results) {\n        const filteredResult = [];\n        const resultMap = new Map();\n        for (let i = 0; i < results.length; i++) {\n            const {device, field, result} = results[i];\n            // Query parameters returned an empty set\n            if (result.status === 200 && result.data.result.length === 0) {\n                continue;\n            }\n\n            const {fields, values} = result.data.result[0];\n            const fieldIdx = findFieldIdx(fields, field);\n            const f = fields[fieldIdx];\n            for (let j = 0; j < values.length; j++) {\n                const row = values[j];\n                const time = row[0];\n                const val = row[fieldIdx];\n\n                // remove value, keep only fields used in group by (non-time)\n                const temp = row.slice(1);\n                temp.splice(fieldIdx - 1, 1)  // -1 to account for removing first element\n                // extra identifies the series uniquely among device + any group bys\n                const extra = [device].concat(temp).join(\",\");\n                const mapKey = f + \" (\" + extra + \")\";\n\n                const pts = resultMap.has(mapKey) ? resultMap.get(mapKey) : [];\n                pts.push([val, time]);\n                resultMap.set(mapKey, pts);\n            }\n        }\n\n        // Each key is a graph series, need to sort the points from oldest to newest\n        resultMap.forEach((v, k) => {\n            const sorted = v.sort((a, b) => a[1] - b[1]);\n            filteredResult.push({target: k, datapoints: sorted});\n        });\n        return {data: filteredResult};\n    }\n\n    // Called once per panel (graph)\n    query(options) {\n        console.log(options);\n        const query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        } else if (query.targets.length === 1 && !query.targets[0].target) {\n            return this.q.when({data: []});\n        }\n\n        const reqs = [];\n        // For each 'query', we must build a request to iobeam, where a\n        // request is {device: ..., url: ...}. 'device' tells us\n        // the device this is for (to pass along to parsing function), and\n        // 'url' is the iobeam backend url to hit.\n        for (let i = 0 ; i < query.targets.length; i++) {\n            const t = query.targets[i];\n            const req = {\n                device: t.device_id,\n                field: t.target\n            };\n\n            const queryParams = {\n                limit: query.maxDataPoints || 1000\n            };\n\n            if (query.range) {  // create time clause\n                const from = query.range.from.toDate().getTime();\n                const to = query.range.to.toDate().getTime();\n                queryParams.time = from + \",\" + to;\n            }\n\n            // Set up all where clauses, incl device_id equality\n            queryParams.where = [];\n            if (t.device_id !== ALL_DEVICES) {\n                queryParams.where.push(\"eq(device_id,\" + t.device_id + \")\");\n            }\n            if (t.wheres && t.wheres.length > 0) {\n                for (let j = 0; j < t.wheres.length; j++) {\n                    queryParams.where.push(t.wheres[j]);\n                }\n            }\n\n            // Group by query params\n            Object.assign(queryParams, buildGroupByParam(t, (t.interval || query.interval)));\n\n            req.url = this.url + buildDataUrl(t.namespace, t.target) + buildUrlQueryStr(queryParams);\n            reqs.push(req);\n        }\n\n        // Helper function to create the headers for each request.\n        const headers = this.headers;\n        const makeDataSourceRequest = (req) => {\n            return {\n                method: \"GET\",\n                headers: headers,\n                url: req.url\n            };\n        };\n\n        const resps = [];\n        // Helper function to generate the callback for each request.\n        // The callback first pushes the response onto the collection `resps`,\n        // which will be parsed at the end. Then if there are further requests,\n        // it launches the next one with a similar callback. If there are no\n        // more requests, it parses all the collected responses.\n        const intermdiateFn = (device, field) => {\n            return (result) => {\n                resps.push({device: device, field: field, result: result});\n                if (reqs.length === 0) {\n                    return this.parseQueryResults(resps);\n                } else {\n                    const req = reqs.shift();\n                    return this.backendSrv.datasourceRequest(makeDataSourceRequest(req))\n                        .then(intermdiateFn(req.device, req.field));\n                }\n            }\n        }\n\n        const req = reqs.shift();\n        return this.backendSrv.datasourceRequest(makeDataSourceRequest(req))\n            .then(intermdiateFn(req.device, req.field));\n    }\n\n    // Required\n    // Used for testing datasource in datasource configuration page\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + \"/v1/ping\",\n            method: \"GET\"\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working.\", title: \"Success\" };\n            }\n        });\n    }\n\n    /** Get the list of devices for a namespace **/\n    deviceQuery(options) {\n        const ns = options.namespace;\n        return this.backendSrv.datasourceRequest({\n            url: this.url + buildDataUrl(ns, \"device_id\") + \"?limit_by=device_id,1&limit=1000\",\n            data: options,\n            method: \"GET\",\n            headers: this.headers\n        }).then(result => {\n            const {values} = result.data.result[0];\n            const sorted = values.sort((a, b) => {\n                return a[1].localeCompare(b[1]);\n            });\n            sorted.unshift([null, ALL_DEVICES])\n            return _.map(sorted, (row) => {\n                return {text: row[1], value: row[1]};\n            });\n        });\n    }\n\n    /** Get the list of fields for a namespace **/\n    fieldQuery(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + buildDataUrl(\"input\")+ \"?limit=1\",\n            data: options,\n            method: \"GET\",\n            headers: this.headers\n        }).then(result => {\n            const {fields} = result.data.result[0];\n            return _.map(fields.slice(1), (f) => {\n                return {text: f, value: f};\n            });\n        });\n    }\n\n    /** Get the namespaces for a project **/\n    namespaceQuery(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + NAMESPACES_URL,\n            data: options,\n            method: \"GET\",\n            headers: this.headers\n        }).then(result => {\n            const {namespaces} = result.data;\n            return _.map(namespaces, (ns) => {\n                return {text: ns.namespace_name, value: ns.namespace_name};\n            });\n        });\n    }\n\n    buildQueryParameters(options) {\n        // remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.target !== DEFAULT_SELECT_FIELD\n                && target.namespace !== DEFAULT_SELECT_NS\n                && target.device_id !== DEFAULT_DEVICE;\n        });\n\n        var targets = _.map(options.targets, target => {\n            const wheres = [];\n            if (target.wheres) {\n                for (let i = 0; i < target.wheres.length; i++) {\n                    const row = target.wheres[i];\n                    if (row.length > 1 && row[0].value !== DEFAULT_WHERE) {\n                        wheres.push(row[0].value);\n                    }\n                }\n            }\n\n            const group_by = !target.group_by_field ? null : {\n                field: target.group_by_field,\n                operator: target.group_by_operator\n            };\n\n            return {\n                target: this.templateSrv.replace(target.target),\n                namespace: this.templateSrv.replace(target.namespace),\n                device_id: this.templateSrv.replace(target.device_id),\n                group_by: group_by,\n                wheres: wheres,\n                interval: target.interval,\n                refId: target.refId,\n                hide: target.hide\n            };\n        });\n\n        options.targets = targets;\n\n        return options;\n    }\n}\n"]}