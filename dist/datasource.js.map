{"version":3,"sources":["../src/datasource.js"],"names":["buildDataUrl","ns","field","DATA_URL","buildUrlQueryStr","params","keys","Object","ret","sep","i","length","k","vals","Array","v","encodeURIComponent","buildGroupByParam","t","interval","group_by","operator","NONE","buildLimitByParam","limit_by","limit","findFieldIdx","fields","indexOf","buildAuthHeader","token","prefix","_","USER_TOKEN_KEY","PROXY_ADDRESS","USER_TOKEN_SUCCESS","ALL_DEVICES","DEFAULT_DEVICE","DEFAULT_SELECT_FIELD","DEFAULT_SELECT_NS","DEFAULT_SELECT_PROJECT","DEFAULT_WHERE","LAST_PROJECT_TOKEN","NAMESPACES_URL","PROJECTS_URL","window","postMessage","addEventListener","e","origin","originalEvent","data","localStorage","setItem","console","log","warn","iobeamDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","userToken","jsonData","iobeam_user_token","projectToken","q","results","filteredResult","resultMap","Map","device","result","status","values","fieldIdx","f","j","row","time","val","temp","slice","splice","extra","concat","join","mapKey","pts","has","get","push","set","forEach","sorted","sort","a","b","target","datapoints","getItem","user_token","options","query","buildQueryParameters","targets","filter","hide","when","reqs","req","device_id","queryParams","maxDataPoints","range","from","toDate","getTime","to","where","wheres","assign","namespace","project_title","boundToken","getProjectToken","bind","makeDataSourceRequest","method","headers","resps","intermdiateFn","parseQueryResults","shift","datasourceRequest","then","response","message","title","innerFn","project_id","match","project_token","getUserToken","localeCompare","unshift","map","text","value","namespaces","namespace_name","projects","project","project_name","labels","label","idx","substring","group_by_operator","group_by_field","limit_by_field","limit_by_count","replace","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {\n    USER_TOKEN_KEY,\n    PROXY_ADDRESS,\n    USER_TOKEN_SUCCESS,\n    ALL_DEVICES,\n    DEFAULT_DEVICE,\n    DEFAULT_SELECT_FIELD,\n    DEFAULT_SELECT_NS,\n    DEFAULT_SELECT_PROJECT,\n    DEFAULT_WHERE,\n    LAST_PROJECT_TOKEN,\n    NONE\n} from \"./constants\";\n\nconst DATA_URL = \"/v1/data/\";\nconst NAMESPACES_URL = \"/v1/namespaces/\";\nconst PROJECTS_URL = \"/v1/projects/\";\n\nif (window) {\n    window.postMessage(\"send token\", PROXY_ADDRESS);\n\n    window.addEventListener(\"message\", (e) => {\n        const origin = e.origin || e.originalEvent.origin;\n        if (origin !== PROXY_ADDRESS\n            || e.data === \"send token\"\n            || e.data === USER_TOKEN_SUCCESS) {\n            return;\n        }\n        try {\n            window.localStorage.setItem(USER_TOKEN_KEY, e.data.token);\n            window.postMessage(USER_TOKEN_SUCCESS, PROXY_ADDRESS);\n            console.log(\"User token set\");\n        }\n        catch (e) {\n            console.warn(\"Error: User token not set\");\n            window.postMessage(\"\", PROXY_ADDRESS);\n        }\n    });\n}\n\n/** Build string representing iobeam /data endpoint **/\nfunction buildDataUrl(ns, field = \"all\") {\n    return DATA_URL + ns + \"/\" + field;\n}\n\n/**\n * Build string representing the query string from a map of params.\n *\n * params {object} - Key-value pairings to encode. If a value is a string,\n *                  a single copy of the key is added with that value. If it is\n *                  an array, multiple copies of that key are added for each\n *                  value.\n **/\nfunction buildUrlQueryStr(params) {\n    const keys = Object.keys(params);\n    let ret = \"\";\n    let sep = \"?\";\n    for (let i = 0; i < keys.length; i++) {\n        const k = keys[i];\n\n        let vals;\n        if (params[k] instanceof Array) {\n            vals = params[k];\n        } else if (params[k]) {\n            vals = [params[k]];\n        } else {\n            continue;\n        }\n\n        for (let v of vals) {\n            ret += sep + encodeURIComponent(k) + \"=\" + encodeURIComponent(v);\n            sep = \"&\";\n        }\n    }\n\n    return ret;\n}\n\nfunction buildGroupByParam(t, interval) {\n    const ret = {};\n    if (t.group_by) {\n        if (t.group_by.operator && interval && t.group_by.operator !== NONE) {\n            ret.group_by = \"time(\" + interval + \")\";\n            ret.operator = t.group_by.operator;\n        }\n\n        if (t.group_by.field && t.group_by.field !== NONE) {\n            if (ret.group_by) {\n                ret.group_by += \",\";\n            }\n            ret.group_by += t.group_by.field;\n        }\n    }\n\n    return ret;\n}\n\nfunction buildLimitByParam(t) {\n    if (t.limit_by) {\n        if (t.limit_by.field !== NONE) {\n            const {limit, field} = t.limit_by;\n            return {\n                \"limit_by\": field + \",\" + limit\n            };\n        }\n    }\n    return {};\n}\n\n/**\n * Used to find which element in fields corresponds to field, by looking\n * for field as a substring so it matches things like 'avg(field)' as well\n * 'field'.\n *\n * fields {array} - Array of fields to search in\n * field {string} - Substring to search for\n **/\nfunction findFieldIdx(fields, field) {\n    for (let i = 0; i < fields.length; i++) {\n        if (fields[i].indexOf(field) > -1) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction buildAuthHeader(token, prefix = \"Bearer\") {\n    return {\n        \"Authorization\": prefix + \" \" + token,\n        \"Accept-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\"\n    };\n}\n\nexport class iobeamDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.localStorage = window.localStorage;\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.userToken = instanceSettings.jsonData.iobeam_user_token;\n        this.projectToken = \"\";\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n    }\n\n    /**\n     * Parse each query result and create a single datasource response that\n     * Grafana expects.\n     *\n     * results {array} - An array of objects of the form {device: ..., result: ...}\n     * which contains the http result for a given device.\n     **/\n    parseQueryResults(results) {\n        const filteredResult = [];\n        const resultMap = new Map();\n        for (let i = 0; i < results.length; i++) {\n            const {device, field, result} = results[i];\n            // Query parameters returned an empty set\n            if (result.status === 200 && result.data.result.length === 0) {\n                continue;\n            }\n\n            const {fields, values} = result.data.result[0];\n            const fieldIdx = findFieldIdx(fields, field);\n            const f = fields[fieldIdx];\n            for (let j = 0; j < values.length; j++) {\n                const row = values[j];\n                const time = row[0];\n                const val = row[fieldIdx];\n\n                // remove value, keep only fields used in group by (non-time)\n                const temp = row.slice(1);\n                temp.splice(fieldIdx - 1, 1);  // -1 to account for removing first element\n                // extra identifies the series uniquely among device + any group bys\n                const extra = [device].concat(temp).join(\",\");\n                const mapKey = f + \" (\" + extra + \")\";\n\n                const pts = resultMap.has(mapKey) ? resultMap.get(mapKey) : [];\n                pts.push([val, time]);\n                resultMap.set(mapKey, pts);\n            }\n        }\n\n        // Each key is a graph series, need to sort the points from oldest to newest\n        resultMap.forEach((v, k) => {\n            const sorted = v.sort((a, b) => a[1] - b[1]);\n            filteredResult.push({target: k, datapoints: sorted});\n        });\n        return {data: filteredResult};\n    }\n\n    getUserToken() {\n        if (this.localStorage[USER_TOKEN_KEY]) {\n            return this.localStorage.getItem(USER_TOKEN_KEY);\n        } else if (this.user_token) {\n            this.localStorage.setItem(USER_TOKEN_KEY, this.user_token);\n            return this.user_token;\n        } else {\n            console.log(\"User token not set\");\n            return \"\";\n        }\n    }\n\n    // Called once per panel (graph)\n    query(options) {\n        const query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n        console.log(\"QUERY TARGETS\", query.targets.length);//REMOVE\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        } else if (query.targets.length === 1 && !query.targets[0].target) {\n            return this.q.when({data: []});\n        }\n\n        const reqs = [];\n        // For each 'query', we must build a request to iobeam, where a\n        // request is {device: ..., url: ...}. 'device' tells us\n        // the device this is for (to pass along to parsing function), and\n        // 'url' is the iobeam backend url to hit.\n        for (let i = 0 ; i < query.targets.length; i++) {\n            const t = query.targets[i];\n            const req = {\n                device: t.device_id,\n                field: t.target\n            };\n\n            const queryParams = {\n                limit: query.maxDataPoints || 1000\n            };\n\n            if (query.range) {  // create time clause\n                const from = query.range.from.toDate().getTime();\n                const to = query.range.to.toDate().getTime();\n                queryParams.time = from + \",\" + to;\n            }\n\n            // Set up all where clauses, incl device_id equality\n            queryParams.where = [];\n            if (t.device_id !== ALL_DEVICES) {\n                queryParams.where.push(\"eq(device_id,\" + t.device_id + \")\");\n            }\n            if (t.wheres && t.wheres.length > 0) {\n                for (let j = 0; j < t.wheres.length; j++) {\n                    queryParams.where.push(t.wheres[j]);\n                }\n            }\n\n            // Group by & limit by query params\n            Object.assign(queryParams, buildGroupByParam(t, (t.interval || query.interval)));\n            Object.assign(queryParams, buildLimitByParam(t));\n\n            req.url = this.url + buildDataUrl(t.namespace, t.field) + buildUrlQueryStr(queryParams);\n            req.project_title = t.project_title;\n            reqs.push(req);\n        }\n\n        // Helper function to create the headers for each request.\n        const boundToken = this.getProjectToken.bind(this);\n\n        const makeDataSourceRequest = (req, token) => {\n            return {\n                method: \"GET\",\n                headers: buildAuthHeader(token),\n                url: req.url\n            };\n        };\n\n        const resps = [];\n        // Helper function to generate the callback for each request.\n        // The callback first pushes the response onto the collection `resps`,\n        // which will be parsed at the end. Then if there are further requests,\n        // it launches the next one with a similar callback. If there are no\n        // more requests, it parses all the collected responses.\n        const intermdiateFn = (device, field) => {\n            console.log(\"Adding Query\");\n            return (result) => {\n                resps.push({device: device, field: field, result: result});\n                if (reqs.length === 0) {\n                    console.log(\"RESPS\", resps);//REMOVE\n                    return this.parseQueryResults(resps);\n                } else {\n                    const req = reqs.shift();\n                    console.log(\"RESPS DECREASE\", resps);//REMOVE\n                    return boundToken(req.project_title, (token) => {\n                        return this.backendSrv.datasourceRequest(makeDataSourceRequest(req, token))\n                        .then(intermdiateFn(req.device, req.field));\n                    });\n                }\n            };\n        };\n\n        const req = reqs.shift();\n        return boundToken(req.project_title, (token) => {\n            console.log(\"INITIAL RESP CALL\");\n            return this.backendSrv.datasourceRequest(makeDataSourceRequest(req))\n                .then(intermdiateFn(req.device, req.field));\n        });\n\n    }\n\n    // Required\n    // Used for testing datasource in datasource configuration page\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + \"/v1/ping\",\n            method: \"GET\",\n            headers: buildAuthHeader()\n        }).then(response => {\n            if (response.status === 200 /*&& /https/.test(this.url) TODO(fix when PR comes through)*/) {\n                return { status: \"success\", message: \"Data source is working.  Make sure you use 'https'\", title: \"Success\" };\n            // } else if (response.status === 200) {\n            //     return {status: \"failure\", message: \"Please use 'https'\", title: \"Wrong scheme\"};\n            } else {\n                return \"\";\n            }\n        });\n    }\n\n    // Used to get project token before running specific query\n    getProjectToken(project_title, innerFn) {\n        const project_id = project_title ? project_title.match(/\\(([0-9]+)\\)/)[1] : this.project_id;\n        //get stored token if it exists\n        if (!project_id) {\n            const token = this.project_token || this.localStorage[LAST_PROJECT_TOKEN];\n            if (token) {\n                return innerFn(this.project_token || this.localStorage[LAST_PROJECT_TOKEN]);\n            }\n            return null;\n        } else if (this.localStorage[project_id]) {\n            return innerFn(this.localStorage.getItem(project_id));\n        } else {\n            return this.backendSrv.datasourceRequest({\n                url: this.url + \"/v1/tokens/project?project_id=\" + project_id,\n                method: \"GET\",\n                headers: buildAuthHeader(this.getUserToken())\n            }).then(response => {\n                if (response.status === 200) {\n                    this.localStorage.setItem(project_id, response.data.token);\n                    this.localStorage.setItem(LAST_PROJECT_TOKEN, response.data.token);\n                    this.project_id = project_id;\n                    this.projectToken = response.data.token;\n                    return innerFn(response.data.token);\n                } else {\n                    console.log(\"Error retreiving project token\");\n                    return \"\";\n                }\n            });\n        }\n    }\n\n    /** Get the list of devices for a namespace **/\n    deviceQuery(options) {\n        const ns = options.namespace;\n        return this.getProjectToken(options.project_title, (token) => {\n            return this.backendSrv.datasourceRequest({\n                url: this.url + buildDataUrl(ns, \"device_id\") + \"?limit_by=device_id,1&limit=1000\",\n                data: options, //TODO(scao) - is this needed?\n                method: \"GET\",\n                headers: buildAuthHeader(token)\n            }).then(result => {\n                const {values} = result.data.result[0];\n                const sorted = values.sort((a, b) => {\n                    return a[1].localeCompare(b[1]);\n                });\n                sorted.unshift([null, ALL_DEVICES]);\n                return _.map(sorted, (row) => {\n                    return {text: row[1], value: row[1]};\n                });\n            });\n        });\n    }\n\n    /** Get the list of fields for a namespace **/\n    fieldQuery(options) {\n        if (!options.namespace || options.namespace === DEFAULT_SELECT_NS) {\n            return this.q.when([]);\n        }\n        return this.getProjectToken(options.project_title, (token) => {\n            return this.backendSrv.datasourceRequest({\n                url: this.url + buildDataUrl(options.namespace)+ \"?limit=1\",\n                data: options, //TODO(scao) - is this needed?\n                method: \"GET\",\n                headers: buildAuthHeader(token)\n            }).then(result => {\n                const {fields} = result.data.result[0];\n                return _.map(fields.slice(1), (f) => {\n                    return {text: f, value: f};\n                });\n            });\n        });\n    }\n\n    /** Get the namespaces for a project **/\n    namespaceQuery(options) {\n        return this.getProjectToken(options.project_title, (token) => {\n            return this.backendSrv.datasourceRequest({\n                url: this.url + NAMESPACES_URL,\n                data: options, //TODO(scao) - is this needed?\n                method: \"GET\",\n                headers: buildAuthHeader(token)\n            }).then(result => {\n                const {namespaces} = result.data;\n                return _.map(namespaces, (ns) => {\n                    return {text: ns.namespace_name, value: ns.namespace_name};\n                });\n            });\n        });\n    }\n\n    /** Get the projects for the current user **/\n    projectQuery(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + PROJECTS_URL,\n            data: options, //TODO(scao) - is this needed?\n            method: \"GET\",\n            headers: buildAuthHeader(this.getUserToken())\n        }).then(result => {\n            const {projects} = result.data;\n            return _.map(projects, (project) => {\n                const text = project.project_name + \"(\" + project.project_id + \")\";\n                return {text, value: project.project_id};\n            });\n        });\n    }\n\n    limitByFieldsQuery(options) {\n        if (!options.namespace || options.namespace === DEFAULT_SELECT_NS) {\n            return this.q.when([]);\n        }\n        return this.getProjectToken(options.project_title, (token) => {\n            return this.backendSrv.datasourceRequest({\n                url: this.url + NAMESPACES_URL + buildUrlQueryStr({namespace_name: options.namespace}),\n                data: options, //TODO(scao) - is this needed?\n                method: \"GET\",\n                headers: buildAuthHeader()\n            }).then(result => {\n                const {namespaces} = result.data;\n                const {labels} = namespaces[0];\n                const temp = _.filter(Object.keys(labels), (label) => {\n                    return label.indexOf(\":distinct\") !== -1;\n                });\n                return _.map(temp, (label) => {\n                    const idx = label.indexOf(\":distinct\");\n                    const val = label.substring(0, idx);\n                    return {text: val, value: val};\n                });\n            });\n        });\n    }\n\n    metricFindQuery() {\n    }\n\n    buildQueryParameters(options) {\n        // remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.field !== DEFAULT_SELECT_FIELD\n                && target.namespace !== DEFAULT_SELECT_NS\n                && target.device_id !== DEFAULT_DEVICE\n                && target.project !== DEFAULT_SELECT_PROJECT;\n        });\n\n        let targets = _.map(options.targets, target => {\n            const wheres = [];\n            if (target.wheres) {\n                for (let i = 0; i < target.wheres.length; i++) {\n                    const row = target.wheres[i];\n                    if (row.length > 1 && row[0].value !== \"\") {\n                        wheres.push(row[0].value);\n                    }\n                }\n            }\n\n            const group_by = {};\n            if (target.group_by_operator) {\n                group_by.operator = target.group_by_operator;\n            }\n            if (target.group_by_field) {\n                group_by.field = target.group_by_field;\n            }\n\n            const limit_by = !target.limit_by_field ? null : {\n                field: target.limit_by_field,\n                limit: target.limit_by_count\n            };\n\n            return {\n                field: this.templateSrv.replace(target.field),\n                namespace: this.templateSrv.replace(target.namespace),\n                device_id: this.templateSrv.replace(target.device_id),\n                project_title: target.project_title,\n                project: target.project,\n                group_by: group_by,\n                limit_by: limit_by,\n                wheres: wheres,\n                interval: target.interval,\n                refId: target.refId,\n                hide: target.hide\n            };\n        });\n\n        options.targets = targets;\n\n        return options;\n    }\n}\n"]}