{"version":3,"sources":["../src/datasource.js"],"names":["buildDataUrl","ns","field","DATA_URL","buildUrlQueryStr","params","keys","Object","ret","sep","i","length","k","vals","Array","v","encodeURIComponent","buildGroupByParam","t","interval","group_by","operator","NONE","buildLimitByParam","limit_by","limit","findFieldIdx","fields","indexOf","_","ALL_DEVICES","DEFAULT_DEVICE","DEFAULT_SELECT_FIELD","DEFAULT_SELECT_NS","DEFAULT_WHERE","NAMESPACES_URL","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","jsonData","pid","parseInt","iobeam_project_id","token","iobeam_project_token","q","headers","results","filteredResult","resultMap","Map","device","result","status","data","values","fieldIdx","f","j","row","time","val","temp","slice","splice","extra","concat","join","mapKey","pts","has","get","push","set","forEach","sorted","sort","a","b","target","datapoints","options","console","log","query","buildQueryParameters","targets","filter","hide","when","reqs","req","device_id","queryParams","maxDataPoints","range","from","toDate","getTime","to","where","wheres","assign","namespace","makeDataSourceRequest","method","resps","intermdiateFn","parseQueryResults","shift","datasourceRequest","then","response","message","title","localeCompare","unshift","map","text","value","namespaces","namespace_name","labels","label","idx","substring","group_by_operator","group_by_field","limit_by_field","limit_by_count","replace","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {\n    ALL_DEVICES,\n    DEFAULT_DEVICE,\n    DEFAULT_SELECT_FIELD,\n    DEFAULT_SELECT_NS,\n    DEFAULT_WHERE,\n    NONE\n} from \"./constants\";\n\nconst DATA_URL = \"/v1/data/\";\nconst NAMESPACES_URL = \"/v1/namespaces/\";\n\n/** Build string representing iobeam /data endpoint **/\nfunction buildDataUrl(ns, field = \"all\") {\n    return DATA_URL + ns + \"/\" + field;\n}\n\n/**\n * Build string representing the query string from a map of params.\n *\n * params {object} - Key-value pairings to encode. If a value is a string,\n *                  a single copy of the key is added with that value. If it is\n *                  an array, multiple copies of that key are added for each\n *                  value.\n **/\nfunction buildUrlQueryStr(params) {\n    const keys = Object.keys(params);\n    let ret = \"\";\n    let sep = \"?\";\n    for (let i = 0; i < keys.length; i++) {\n        const k = keys[i];\n\n        let vals;\n        if (params[k] instanceof Array) {\n            vals = params[k]\n        } else if (params[k]) {\n            vals = [params[k]];\n        } else {\n            continue;\n        }\n\n        for (let v of vals) {\n            ret += sep + encodeURIComponent(k) + \"=\" + encodeURIComponent(v);\n            sep = \"&\"\n        }\n    }\n\n    return ret;\n}\n\nfunction buildGroupByParam(t, interval) {\n    const ret = {};\n    if (t.group_by) {\n        if (t.group_by.operator && interval && t.group_by.operator !== NONE) {\n            ret.group_by = \"time(\" + interval + \")\";\n            ret.operator = t.group_by.operator;\n        }\n\n        if (t.group_by.field && t.group_by.field !== NONE) {\n            if (ret.group_by) {\n                ret.group_by += \",\";\n            }\n            ret.group_by += t.group_by.field;\n        }\n    }\n\n    return ret;\n}\n\nfunction buildLimitByParam(t) {\n    if (t.limit_by) {\n        if (t.limit_by.field !== NONE) {\n            const {limit, field} = t.limit_by;\n            return {\n                \"limit_by\": field + \",\" + limit\n            };\n        }\n    }\n    return {};\n}\n\n/**\n * Used to find which element in fields corresponds to field, by looking\n * for field as a substring so it matches things like 'avg(field)' as well\n * 'field'.\n *\n * fields {array} - Array of fields to search in\n * field {string} - Substring to search for\n **/\nfunction findFieldIdx(fields, field) {\n    for (let i = 0; i < fields.length; i++) {\n        if (fields[i].indexOf(field) > -1) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        if (instanceSettings.jsonData) {\n            this.pid = parseInt(instanceSettings.jsonData.iobeam_project_id);\n            this.token = instanceSettings.jsonData.iobeam_project_token;\n        }\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n\n        this.headers = {\n            \"Accept-Type\": \"application/json\",\n            \"Authorization\": \"Bearer \" + this.token\n        };\n    }\n\n    /**\n     * Parse each query result and create a single datasource response that\n     * Grafana expects.\n     *\n     * results {array} - An array of objects of the form {device: ..., result: ...}\n     * which contains the http result for a given device.\n     **/\n    parseQueryResults(results) {\n        const filteredResult = [];\n        const resultMap = new Map();\n        for (let i = 0; i < results.length; i++) {\n            const {device, field, result} = results[i];\n            // Query parameters returned an empty set\n            if (result.status === 200 && result.data.result.length === 0) {\n                continue;\n            }\n\n            const {fields, values} = result.data.result[0];\n            const fieldIdx = findFieldIdx(fields, field);\n            const f = fields[fieldIdx];\n            for (let j = 0; j < values.length; j++) {\n                const row = values[j];\n                const time = row[0];\n                const val = row[fieldIdx];\n\n                // remove value, keep only fields used in group by (non-time)\n                const temp = row.slice(1);\n                temp.splice(fieldIdx - 1, 1)  // -1 to account for removing first element\n                // extra identifies the series uniquely among device + any group bys\n                const extra = [device].concat(temp).join(\",\");\n                const mapKey = f + \" (\" + extra + \")\";\n\n                const pts = resultMap.has(mapKey) ? resultMap.get(mapKey) : [];\n                pts.push([val, time]);\n                resultMap.set(mapKey, pts);\n            }\n        }\n\n        // Each key is a graph series, need to sort the points from oldest to newest\n        resultMap.forEach((v, k) => {\n            const sorted = v.sort((a, b) => a[1] - b[1]);\n            filteredResult.push({target: k, datapoints: sorted});\n        });\n        return {data: filteredResult};\n    }\n\n    // Called once per panel (graph)\n    query(options) {\n        console.log(options);\n        const query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        } else if (query.targets.length === 1 && !query.targets[0].target) {\n            return this.q.when({data: []});\n        }\n\n        const reqs = [];\n        // For each 'query', we must build a request to iobeam, where a\n        // request is {device: ..., url: ...}. 'device' tells us\n        // the device this is for (to pass along to parsing function), and\n        // 'url' is the iobeam backend url to hit.\n        for (let i = 0 ; i < query.targets.length; i++) {\n            const t = query.targets[i];\n            const req = {\n                device: t.device_id,\n                field: t.target\n            };\n\n            const queryParams = {\n                limit: query.maxDataPoints || 1000\n            };\n\n            if (query.range) {  // create time clause\n                const from = query.range.from.toDate().getTime();\n                const to = query.range.to.toDate().getTime();\n                queryParams.time = from + \",\" + to;\n            }\n\n            // Set up all where clauses, incl device_id equality\n            queryParams.where = [];\n            if (t.device_id !== ALL_DEVICES) {\n                queryParams.where.push(\"eq(device_id,\" + t.device_id + \")\");\n            }\n            if (t.wheres && t.wheres.length > 0) {\n                for (let j = 0; j < t.wheres.length; j++) {\n                    queryParams.where.push(t.wheres[j]);\n                }\n            }\n\n            // Group by & limit by query params\n            Object.assign(queryParams, buildGroupByParam(t, (t.interval || query.interval)));\n            Object.assign(queryParams, buildLimitByParam(t));\n\n            req.url = this.url + buildDataUrl(t.namespace, t.target) + buildUrlQueryStr(queryParams);\n            reqs.push(req);\n        }\n\n        // Helper function to create the headers for each request.\n        const headers = this.headers;\n        const makeDataSourceRequest = (req) => {\n            return {\n                method: \"GET\",\n                headers: headers,\n                url: req.url\n            };\n        };\n\n        const resps = [];\n        // Helper function to generate the callback for each request.\n        // The callback first pushes the response onto the collection `resps`,\n        // which will be parsed at the end. Then if there are further requests,\n        // it launches the next one with a similar callback. If there are no\n        // more requests, it parses all the collected responses.\n        const intermdiateFn = (device, field) => {\n            return (result) => {\n                resps.push({device: device, field: field, result: result});\n                if (reqs.length === 0) {\n                    return this.parseQueryResults(resps);\n                } else {\n                    const req = reqs.shift();\n                    return this.backendSrv.datasourceRequest(makeDataSourceRequest(req))\n                        .then(intermdiateFn(req.device, req.field));\n                }\n            }\n        }\n\n        const req = reqs.shift();\n        return this.backendSrv.datasourceRequest(makeDataSourceRequest(req))\n            .then(intermdiateFn(req.device, req.field));\n    }\n\n    // Required\n    // Used for testing datasource in datasource configuration page\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + \"/v1/ping\",\n            method: \"GET\"\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working.\", title: \"Success\" };\n            }\n        });\n    }\n\n    /** Get the list of devices for a namespace **/\n    deviceQuery(options) {\n        const ns = options.namespace;\n        return this.backendSrv.datasourceRequest({\n            url: this.url + buildDataUrl(ns, \"device_id\") + \"?limit_by=device_id,1&limit=1000\",\n            data: options,\n            method: \"GET\",\n            headers: this.headers\n        }).then(result => {\n            const {values} = result.data.result[0];\n            const sorted = values.sort((a, b) => {\n                return a[1].localeCompare(b[1]);\n            });\n            sorted.unshift([null, ALL_DEVICES])\n            return _.map(sorted, (row) => {\n                return {text: row[1], value: row[1]};\n            });\n        });\n    }\n\n    /** Get the list of fields for a namespace **/\n    fieldQuery(options) {\n        if (!options.namespace || options.namespace === DEFAULT_SELECT_NS) {\n            return this.q.when([]);\n        }\n        return this.backendSrv.datasourceRequest({\n            url: this.url + buildDataUrl(options.namespace)+ \"?limit=1\",\n            data: options,\n            method: \"GET\",\n            headers: this.headers\n        }).then(result => {\n            const {fields} = result.data.result[0];\n            return _.map(fields.slice(1), (f) => {\n                return {text: f, value: f};\n            });\n        });\n    }\n\n    /** Get the namespaces for a project **/\n    namespaceQuery(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + NAMESPACES_URL,\n            data: options,\n            method: \"GET\",\n            headers: this.headers\n        }).then(result => {\n            const {namespaces} = result.data;\n            return _.map(namespaces, (ns) => {\n                return {text: ns.namespace_name, value: ns.namespace_name};\n            });\n        });\n    }\n\n    limitByFieldsQuery(options) {\n        if (!options.namespace || options.namespace === DEFAULT_SELECT_NS) {\n            return this.q.when([]);\n        }\n        return this.backendSrv.datasourceRequest({\n            url: this.url + NAMESPACES_URL + buildUrlQueryStr({namespace_name: options.namespace}),\n            data: options,\n            method: \"GET\",\n            headers: this.headers\n        }).then(result => {\n            const {namespaces} = result.data;\n            const {labels} = namespaces[0];\n            const temp = _.filter(Object.keys(labels), (label) => {\n                return label.indexOf(\":distinct\") !== -1;\n            });\n            return _.map(temp, (label) => {\n                const idx = label.indexOf(\":distinct\");\n                const val = label.substring(0, idx);\n                return {text: val, value: val};\n            });\n        });\n    }\n\n    metricFindQuery() {\n    }\n\n    buildQueryParameters(options) {\n        // remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.target !== DEFAULT_SELECT_FIELD\n                && target.namespace !== DEFAULT_SELECT_NS\n                && target.device_id !== DEFAULT_DEVICE;\n        });\n\n        var targets = _.map(options.targets, target => {\n            const wheres = [];\n            if (target.wheres) {\n                for (let i = 0; i < target.wheres.length; i++) {\n                    const row = target.wheres[i];\n                    if (row.length > 1 && row[0].value !== \"\") {\n                        wheres.push(row[0].value);\n                    }\n                }\n            }\n\n            const group_by = {};\n            if (target.group_by_operator) {\n                group_by.operator = target.group_by_operator;\n            }\n            if (target.group_by_field) {\n                group_by.field = target.group_by_field;\n            }\n\n            const limit_by = !target.limit_by_field ? null : {\n                field: target.limit_by_field,\n                limit: target.limit_by_count\n            };\n\n            return {\n                target: this.templateSrv.replace(target.target),\n                namespace: this.templateSrv.replace(target.namespace),\n                device_id: this.templateSrv.replace(target.device_id),\n                group_by: group_by,\n                limit_by: limit_by,\n                wheres: wheres,\n                interval: target.interval,\n                refId: target.refId,\n                hide: target.hide\n            };\n        });\n\n        options.targets = targets;\n\n        return options;\n    }\n}\n"]}