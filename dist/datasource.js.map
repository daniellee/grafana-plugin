{"version":3,"sources":["../src/datasource.js"],"names":["buildDataUrl","ns","field","DATA_URL","buildUrlQueryStr","params","keys","Object","ret","sep","i","length","k","vals","Array","v","encodeURIComponent","buildGroupByParam","t","interval","group_by","operator","NONE","buildLimitByParam","limit_by","limit","findFieldIdx","fields","indexOf","buildAuthHeader","token","prefix","_","USER_TOKEN_KEY","PROXY_ADDRESS","USER_TOKEN_SUCCESS","ALL_DEVICES","DEFAULT_DEVICE","DEFAULT_SELECT_FIELD","DEFAULT_SELECT_NS","DEFAULT_SELECT_PROJECT","DEFAULT_WHERE","LAST_PROJECT_TOKEN","STANDALONE","NAMESPACES_URL","PROJECTS_URL","window","postMessage","addEventListener","e","origin","originalEvent","data","localStorage","setItem","console","log","warn","iobeamDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","userToken","jsonData","iobeam_user_token","projectToken","q","results","filteredResult","resultMap","Map","device","result","status","values","fieldIdx","f","j","row","time","val","temp","slice","splice","extra","concat","join","mapKey","pts","has","get","push","set","forEach","sorted","sort","a","b","target","datapoints","getItem","options","query","buildQueryParameters","targets","filter","hide","when","reqs","req","device_id","queryParams","maxDataPoints","range","from","toDate","getTime","to","where","wheres","assign","namespace","project","getProjectToken","makeDataSourceRequest","method","headers","resps","intermdiateFn","parseQueryResults","shift","datasourceRequest","then","response","message","title","innerFn","project_id","match","project_token","getUserToken","localeCompare","unshift","map","text","value","namespaces","namespace_name","projects","project_name","labels","label","idx","substring","group_by_operator","group_by_field","limit_by_field","limit_by_count","replace","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {\n    USER_TOKEN_KEY,\n    PROXY_ADDRESS,\n    USER_TOKEN_SUCCESS,\n    ALL_DEVICES,\n    DEFAULT_DEVICE,\n    DEFAULT_SELECT_FIELD,\n    DEFAULT_SELECT_NS,\n    DEFAULT_SELECT_PROJECT,\n    DEFAULT_WHERE,\n    LAST_PROJECT_TOKEN,\n    STANDALONE,\n    NONE\n} from \"./constants\";\n\nconst DATA_URL = \"/v1/data/\";\nconst NAMESPACES_URL = \"/v1/namespaces/\";\nconst PROJECTS_URL = \"/v1/projects/\";\n\nif (window && !STANDALONE) {\n    window.postMessage(\"send token\", PROXY_ADDRESS);\n\n    window.addEventListener(\"message\", (e) => {\n        const origin = e.origin || e.originalEvent.origin;\n        if (origin !== PROXY_ADDRESS\n            || e.data === \"send token\"\n            || e.data === USER_TOKEN_SUCCESS) {\n            return;\n        }\n        try {\n            window.localStorage.setItem(USER_TOKEN_KEY, e.data.token);\n            window.postMessage(USER_TOKEN_SUCCESS, PROXY_ADDRESS);\n            console.log(\"User token set\");\n        }\n        catch (e) {\n            console.warn(\"Error: User token not set\");\n            window.postMessage(\"\", PROXY_ADDRESS);\n        }\n    });\n}\n\n/** Build string representing iobeam /data endpoint **/\nfunction buildDataUrl(ns, field = \"all\") {\n    return DATA_URL + ns + \"/\" + field;\n}\n\n/**\n * Build string representing the query string from a map of params.\n *\n * params {object} - Key-value pairings to encode. If a value is a string,\n *                  a single copy of the key is added with that value. If it is\n *                  an array, multiple copies of that key are added for each\n *                  value.\n **/\nfunction buildUrlQueryStr(params) {\n    const keys = Object.keys(params);\n    let ret = \"\";\n    let sep = \"?\";\n    for (let i = 0; i < keys.length; i++) {\n        const k = keys[i];\n\n        let vals;\n        if (params[k] instanceof Array) {\n            vals = params[k];\n        } else if (params[k]) {\n            vals = [params[k]];\n        } else {\n            continue;\n        }\n\n        for (let v of vals) {\n            ret += sep + encodeURIComponent(k) + \"=\" + encodeURIComponent(v);\n            sep = \"&\";\n        }\n    }\n\n    return ret;\n}\n\nfunction buildGroupByParam(t, interval) {\n    const ret = {};\n    if (t.group_by) {\n        if (t.group_by.operator && interval && t.group_by.operator !== NONE) {\n            ret.group_by = \"time(\" + interval + \")\";\n            ret.operator = t.group_by.operator;\n        }\n\n        if (t.group_by.field && t.group_by.field !== NONE) {\n            if (ret.group_by) {\n                ret.group_by += \",\";\n            }\n            ret.group_by += t.group_by.field;\n        }\n    }\n\n    return ret;\n}\n\nfunction buildLimitByParam(t) {\n    if (t.limit_by) {\n        if (t.limit_by.field !== NONE) {\n            const {limit, field} = t.limit_by;\n            return {\n                \"limit_by\": field + \",\" + limit\n            };\n        }\n    }\n    return {};\n}\n\n/**\n * Used to find which element in fields corresponds to field, by looking\n * for field as a substring so it matches things like 'avg(field)' as well\n * 'field'.\n *\n * fields {array} - Array of fields to search in\n * field {string} - Substring to search for\n **/\nfunction findFieldIdx(fields, field) {\n    for (let i = 0; i < fields.length; i++) {\n        if (fields[i].indexOf(field) > -1) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction buildAuthHeader(token, prefix = \"Bearer\") {\n    return {\n        \"Authorization\": prefix + \" \" + token,\n        \"Accept-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\"\n    };\n}\n\nexport class iobeamDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.localStorage = window.localStorage;\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.userToken = instanceSettings.jsonData.iobeam_user_token;\n        this.projectToken = \"\";\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n    }\n\n    /**\n     * Parse each query result and create a single datasource response that\n     * Grafana expects.\n     *\n     * results {array} - An array of objects of the form {device: ..., result: ...}\n     * which contains the http result for a given device.\n     **/\n    parseQueryResults(results) {\n        const filteredResult = [];\n        const resultMap = new Map();\n        for (let i = 0; i < results.length; i++) {\n            const {device, field, result} = results[i];\n            // Query parameters returned an empty set\n            if (result.status === 200 && result.data.result.length === 0) {\n                continue;\n            }\n            const {fields, values} = result.data.result[0];\n            const fieldIdx = findFieldIdx(fields, field);\n            const f = fields[fieldIdx];\n            for (let j = 0; j < values.length; j++) {\n                const row = values[j];\n                const time = row[0];\n                const val = row[fieldIdx];\n\n                // remove value, keep only fields used in group by (non-time)\n                const temp = row.slice(1);\n                temp.splice(fieldIdx - 1, 1);  // -1 to account for removing first element\n                // extra identifies the series uniquely among device + any group bys\n                const extra = [device].concat(temp).join(\",\");\n                const mapKey = f + \" (\" + extra + \")\";\n\n                const pts = resultMap.has(mapKey) ? resultMap.get(mapKey) : [];\n                pts.push([val, time]);\n                resultMap.set(mapKey, pts);\n            }\n        }\n\n        // Each key is a graph series, need to sort the points from oldest to newest\n        resultMap.forEach((v, k) => {\n            const sorted = v.sort((a, b) => a[1] - b[1]);\n            filteredResult.push({target: k, datapoints: sorted});\n        });\n        return {data: filteredResult};\n    }\n\n    getUserToken() {\n        if (this.localStorage[USER_TOKEN_KEY]) {\n            return this.localStorage.getItem(USER_TOKEN_KEY);\n        } else if (this.userToken) {\n            this.localStorage.setItem(USER_TOKEN_KEY, this.userToken);\n            return this.userToken;\n        } else {\n            console.log(\"User token not set\");\n            return \"\";\n        }\n    }\n\n    // Called once per panel (graph)\n    query(options) {\n        const query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        } else if (query.targets.length === 1 && !query.targets[0].target) {\n            return this.q.when({data: []});\n        }\n\n        const reqs = [];\n        // For each 'query', we must build a request to iobeam, where a\n        // request is {device: ..., url: ...}. 'device' tells us\n        // the device this is for (to pass along to parsing function), and\n        // 'url' is the iobeam backend url to hit.\n        for (let i = 0 ; i < query.targets.length; i++) {\n            const t = query.targets[i];\n            const req = {\n                device: t.device_id,\n                field: t.target\n            };\n\n            const queryParams = {\n                limit: query.maxDataPoints || 1000\n            };\n\n            if (query.range) {  // create time clause\n                const from = query.range.from.toDate().getTime();\n                const to = query.range.to.toDate().getTime();\n                queryParams.time = from + \",\" + to;\n            }\n\n            // Set up all where clauses, incl device_id equality\n            queryParams.where = [];\n            if (t.device_id !== ALL_DEVICES) {\n                queryParams.where.push(\"eq(device_id,\" + t.device_id + \")\");\n            }\n            if (t.wheres && t.wheres.length > 0) {\n                for (let j = 0; j < t.wheres.length; j++) {\n                    queryParams.where.push(t.wheres[j]);\n                }\n            }\n\n            // Group by & limit by query params\n            Object.assign(queryParams, buildGroupByParam(t, (t.interval || query.interval)));\n            Object.assign(queryParams, buildLimitByParam(t));\n\n            req.url = this.url + buildDataUrl(t.namespace, t.target) + buildUrlQueryStr(queryParams);\n            req.project = t.project;\n            this.getProjectToken(t.project, (token) => {\n                req.token = token;\n                if (token) {\n                    reqs.push(req);\n                }\n            });\n        }\n\n        // Helper function to create the headers for each request.\n        const makeDataSourceRequest = (req) => {\n            return {\n                method: \"GET\",\n                headers: buildAuthHeader(req.token),\n                url: req.url\n            };\n        };\n\n        const resps = [];\n        // Helper function to generate the callback for each request.\n        // The callback first pushes the response onto the collection `resps`,\n        // which will be parsed at the end. Then if there are further requests,\n        // it launches the next one with a similar callback. If there are no\n        // more requests, it parses all the collected responses.\n        const intermdiateFn = (device, field) => {\n            return (result) => {\n                resps.push({device: device, field: field, result: result});\n                if (reqs.length === 0) {\n                    return this.parseQueryResults(resps);\n                } else {\n                    const req = reqs.shift();\n                    return this.backendSrv.datasourceRequest(makeDataSourceRequest(req))\n                    .then(intermdiateFn(req.device, req.field));\n                }\n            };\n        };\n        if (reqs.length > 0) {\n            const req = reqs.shift();\n            return this.backendSrv.datasourceRequest(makeDataSourceRequest(req))\n            .then(intermdiateFn(req.device, req.field));\n        } else {\n            return null;\n        }\n    }\n\n    // Required\n    // Used for testing datasource in datasource configuration page\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + \"/v1/ping\",\n            method: \"GET\",\n            headers: buildAuthHeader()\n        }).then(response => {\n            if (response.status === 200 /*&& /https/.test(this.url) TODO(fix when PR comes through)*/) {\n                return { status: \"success\", message: \"Data source is working.  Make sure you use 'https'\", title: \"Success\" };\n            // } else if (response.status === 200) {\n            //     return {status: \"failure\", message: \"Please use 'https'\", title: \"Wrong scheme\"};\n            } else {\n                return \"\";\n            }\n        });\n    }\n\n    // Used to get project token before running specific query\n    getProjectToken(project, innerFn) {\n        const project_id = project ? project.match(/\\(([0-9]+)\\)/)[1] : this.project_id;\n        //get stored token if it exists\n        if (!project_id) {\n            const token = this.project_token || this.localStorage[LAST_PROJECT_TOKEN];\n            if (token) {\n                return innerFn(this.project_token || this.localStorage[LAST_PROJECT_TOKEN]);\n            }\n            return null;\n        } else if (this.localStorage[project_id]) {\n            return innerFn(this.localStorage.getItem(project_id));\n        } else {\n            return this.backendSrv.datasourceRequest({\n                url: this.url + \"/v1/tokens/project?project_id=\" + project_id,\n                method: \"GET\",\n                headers: buildAuthHeader(this.getUserToken())\n            }).then(response => {\n                if (response.status === 200) {\n                    this.localStorage.setItem(project_id, response.data.token);\n                    this.localStorage.setItem(LAST_PROJECT_TOKEN, response.data.token);\n                    this.project_id = project_id;\n                    this.projectToken = response.data.token;\n                    return innerFn(response.data.token);\n                } else {\n                    console.log(\"Error retreiving project token\");\n                    return \"\";\n                }\n            });\n        }\n    }\n\n    /** Get the list of devices for a namespace **/\n    deviceQuery(options) {\n        const ns = options.namespace;\n        return this.getProjectToken(options.project, (token) => {\n            return this.backendSrv.datasourceRequest({\n                url: this.url + buildDataUrl(ns, \"device_id\") + \"?limit_by=device_id,1&limit=1000\",\n                data: options, //TODO(scao) - is this needed?\n                method: \"GET\",\n                headers: buildAuthHeader(token)\n            }).then(result => {\n                const {values} = result.data.result[0];\n                const sorted = values.sort((a, b) => {\n                    return a[1].localeCompare(b[1]);\n                });\n                sorted.unshift([null, ALL_DEVICES]);\n                return _.map(sorted, (row) => {\n                    return {text: row[1], value: row[1]};\n                });\n            });\n        });\n    }\n\n    /** Get the list of fields for a namespace **/\n    fieldQuery(options) {\n        if (!options.namespace || options.namespace === DEFAULT_SELECT_NS) {\n            return this.q.when([]);\n        }\n        return this.getProjectToken(options.project, (token) => {\n            return this.backendSrv.datasourceRequest({\n                url: this.url + buildDataUrl(options.namespace)+ \"?limit=1\",\n                data: options, //TODO(scao) - is this needed?\n                method: \"GET\",\n                headers: buildAuthHeader(token)\n            }).then(result => {\n                const {fields} = result.data.result[0];\n                return _.map(fields.slice(1), (f) => {\n                    return {text: f, value: f};\n                });\n            });\n        });\n    }\n\n    /** Get the namespaces for a project **/\n    namespaceQuery(options) {\n        return this.getProjectToken(options.project, (token) => {\n            return this.backendSrv.datasourceRequest({\n                url: this.url + NAMESPACES_URL,\n                method: \"GET\",\n                headers: buildAuthHeader(token)\n            }).then(result => {\n                const {namespaces} = result.data;\n                return _.map(namespaces, (ns) => {\n                    return {text: ns.namespace_name, value: ns.namespace_name};\n                });\n            });\n        });\n    }\n\n    /** Get the projects for the current user **/\n    projectQuery() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + PROJECTS_URL,\n            method: \"GET\",\n            headers: buildAuthHeader(this.getUserToken())\n        }).then(result => {\n            const {projects} = result.data;\n            return _.map(projects, (project) => {\n                const text = project.project_name + \"(\" + project.project_id + \")\";\n                return {text, value: project.project_id};\n            });\n        });\n    }\n\n    limitByFieldsQuery(options) {\n        if (!options.namespace || options.namespace === DEFAULT_SELECT_NS) {\n            return this.q.when([]);\n        }\n        return this.getProjectToken(options.project, (token) => {\n            return this.backendSrv.datasourceRequest({\n                url: this.url + NAMESPACES_URL + buildUrlQueryStr({namespace_name: options.namespace}),\n                data: options, //TODO(scao) - is this needed?\n                method: \"GET\",\n                headers: buildAuthHeader()\n            }).then(result => {\n                const {namespaces} = result.data;\n                const {labels} = namespaces[0];\n                const temp = _.filter(Object.keys(labels), (label) => {\n                    return label.indexOf(\":distinct\") !== -1;\n                });\n                return _.map(temp, (label) => {\n                    const idx = label.indexOf(\":distinct\");\n                    const val = label.substring(0, idx);\n                    return {text: val, value: val};\n                });\n            });\n        });\n    }\n\n    metricFindQuery() {\n    }\n\n    buildQueryParameters(options) {\n        // remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.target !== DEFAULT_SELECT_FIELD\n                && target.namespace !== DEFAULT_SELECT_NS\n                && target.device_id !== DEFAULT_DEVICE\n                && target.project !== DEFAULT_SELECT_PROJECT;\n        });\n\n        let targets = _.map(options.targets, target => {\n            const wheres = [];\n            if (target.wheres) {\n                for (let i = 0; i < target.wheres.length; i++) {\n                    const row = target.wheres[i];\n                    if (row.length > 1 && row[0].value !== \"\") {\n                        wheres.push(row[0].value);\n                    }\n                }\n            }\n\n            const group_by = {};\n            if (target.group_by_operator) {\n                group_by.operator = target.group_by_operator;\n            }\n            if (target.group_by_field) {\n                group_by.field = target.group_by_field;\n            }\n\n            const limit_by = !target.limit_by_field ? null : {\n                field: target.limit_by_field,\n                limit: target.limit_by_count\n            };\n\n            return {\n                target: this.templateSrv.replace(target.target),\n                namespace: this.templateSrv.replace(target.namespace),\n                device_id: this.templateSrv.replace(target.device_id),\n                project: target.project,\n                group_by: group_by,\n                limit_by: limit_by,\n                wheres: wheres,\n                interval: target.interval,\n                refId: target.refId,\n                hide: target.hide\n            };\n        });\n\n        options.targets = targets;\n\n        return options;\n    }\n}\n"]}