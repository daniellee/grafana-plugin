{"version":3,"sources":["../src/datasource.js"],"names":["makeDataUrl","ns","field","DATA_URL","buildUrlQueryStr","params","startSep","keys","Object","ret","sep","i","length","encodeURIComponent","buildGroupByParam","t","interval","group_by","operator","DEFAULT_GROUP_BY","findFieldIdx","fields","indexOf","_","ALL_DEVICES","DEFAULT_DEVICE","DEFAULT_SELECT_FIELD","DEFAULT_SELECT_NS","DEFAULT_WHERE","NAMESPACES_URL","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","jsonData","pid","parseInt","iobeam_project_id","token","iobeam_project_token","q","headers","results","filteredResult","resultMap","Map","device","result","status","data","values","fieldIdx","f","j","row","time","val","temp","slice","splice","extra","concat","join","mapKey","pts","has","get","push","set","forEach","v","k","sorted","sort","a","b","target","datapoints","options","console","log","query","buildQueryParameters","targets","filter","hide","when","reqs","req","device_id","queryParams","limit","maxDataPoints","range","from","toDate","getTime","to","where","assign","queryStr","wheres","namespace","makeDataSourceRequest","method","resps","intermdiateFn","parseQueryResults","shift","datasourceRequest","then","response","message","title","localeCompare","unshift","map","text","value","namespaces","namespace_name","group_by_field","group_by_operator","replace","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {\n    ALL_DEVICES,\n    DEFAULT_DEVICE,\n    DEFAULT_GROUP_BY,\n    DEFAULT_SELECT_FIELD,\n    DEFAULT_SELECT_NS,\n    DEFAULT_WHERE\n} from \"./constants\";\n\nconst DATA_URL = \"/v1/data/\";\nconst NAMESPACES_URL = \"/v1/namespaces/\";\n\nfunction makeDataUrl(ns, field = \"all\") {\n    return DATA_URL + ns + \"/\" + field;\n}\n\nfunction buildUrlQueryStr(params, startSep = \"?\") {\n    const keys = Object.keys(params);\n    let ret = \"\";\n    let sep = startSep;\n    for (let i = 0; i < keys.length; i++) {\n        if (!keys[i]) {\n            continue;\n        }\n        ret += sep + encodeURIComponent(keys[i]) + \"=\" + encodeURIComponent(params[keys[i]]);\n        sep = \"&\"\n    }\n\n    return ret;\n}\n\nfunction buildGroupByParam(t, interval) {\n    const ret = {};\n    if (interval) {\n        ret.group_by = \"time(\" + interval + \")\";\n        ret.operator = \"mean\";\n    }\n\n    if (t.group_by) {\n        if (t.group_by.field !== DEFAULT_GROUP_BY) {\n            if (ret.group_by) {\n                ret.group_by += \",\";\n            }\n            ret.group_by += t.group_by.field;\n        }\n        ret.operator = t.group_by.operator;\n    }\n\n    return ret;\n}\n\n/**\n * Used to find which element in fields corresponds to field, by looking\n * for field as a substring so it matches things like 'avg(field)' as well\n * 'field'.\n **/\nfunction findFieldIdx(fields, field) {\n    for (let i = 0; i < fields.length; i++) {\n        if (fields[i].indexOf(field) > -1) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        if (instanceSettings.jsonData) {\n            this.pid = parseInt(instanceSettings.jsonData.iobeam_project_id);\n            this.token = instanceSettings.jsonData.iobeam_project_token;\n        }\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n\n        this.headers = {\n            \"Accept-Type\": \"application/json\",\n            \"Authorization\": \"Bearer \" + this.token\n        };\n    }\n\n    /**\n     * Parse each query result and create a single datasource response that\n     * Grafana expects.\n     *\n     * results {array} - An array of objects of the form {device: ..., result: ...}\n     * which contains the http result for a given device.\n     **/\n    parseQueryResults(results) {\n        const filteredResult = [];\n        const resultMap = new Map();\n        for (let i = 0; i < results.length; i++) {\n            const {device, field, result} = results[i];\n            // Query parameters returned an empty set\n            if (result.status === 200 && result.data.result.length === 0) {\n                continue;\n            }\n\n            const {fields, values} = result.data.result[0];\n            const fieldIdx = findFieldIdx(fields, field);\n            const f = fields[fieldIdx];\n            for (let j = 0; j < values.length; j++) {\n                const row = values[j];\n                const time = row[0];\n                const val = row[fieldIdx];\n\n                // remove value, keep only fields used in group by (non-time)\n                const temp = row.slice(1);\n                temp.splice(fieldIdx - 1, 1)  // -1 to account for removing first element\n                // extra identifies the series uniquely among device + any group bys\n                const extra = [device].concat(temp).join(\",\");\n                const mapKey = f + \" (\" + extra + \")\";\n\n                const pts = resultMap.has(mapKey) ? resultMap.get(mapKey) : [];\n                pts.push([val, time]);\n                resultMap.set(mapKey, pts);\n            }\n        }\n\n        // Each key is a graph series, need to sort the points from oldest to newest\n        resultMap.forEach((v, k) => {\n            const sorted = v.sort((a, b) => a[1] - b[1]);\n            filteredResult.push({target: k, datapoints: sorted});\n        });\n        return {data: filteredResult};\n    }\n\n    // Called once per panel (graph)\n    query(options) {\n        console.log(options);\n        const query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        } else if (query.targets.length === 1 && !query.targets[0].target) {\n            return this.q.when({data: []});\n        }\n\n        const reqs = [];\n        // For each 'query', we must build a request to iobeam, where a\n        // request is {device: ..., url: ...}. 'device' tells us\n        // the device this is for (to pass along to parsing function), and\n        // 'url' is the iobeam backend url to hit.\n        for (let i = 0 ; i < query.targets.length; i++) {\n            const t = query.targets[i];\n            const req = {\n                device: t.device_id,\n                field: t.target\n            };\n            const queryParams = {\n                limit: query.maxDataPoints || 1000\n            };\n            if (query.range) {\n                const from = query.range.from.toDate().getTime();\n                const to = query.range.to.toDate().getTime();\n                queryParams.time = from + \",\" + to;\n            }\n            if (t.device_id !== ALL_DEVICES) {\n                queryParams.where = \"eq(device_id,\" + t.device_id + \")\";\n            }\n            Object.assign(queryParams, buildGroupByParam(t, (t.interval || query.interval)));\n\n            let queryStr = buildUrlQueryStr(queryParams);\n            if (t.wheres && t.wheres.length > 0) {\n                for (let j = 0; j < t.wheres.length; j++) {\n                    queryStr += buildUrlQueryStr({where: t.wheres[j]}, \"&\");\n                }\n            }\n            req.url = this.url + makeDataUrl(t.namespace, t.target) + queryStr;\n            reqs.push(req);\n        }\n\n        // Helper function to create the headers for each request.\n        const headers = this.headers;\n        const makeDataSourceRequest = (req) => {\n            return {\n                method: \"GET\",\n                headers: headers,\n                url: req.url\n            };\n        };\n\n        const resps = [];\n        // Helper function to generate the callback for each request.\n        // The callback first pushes the response onto the collection `resps`,\n        // which will be parsed at the end. Then if there are further requests,\n        // it launches the next one with a similar callback. If there are no\n        // more requests, it parses all the collected responses.\n        const intermdiateFn = (device, field) => {\n            return (result) => {\n                resps.push({device: device, field: field, result: result});\n                if (reqs.length === 0) {\n                    return this.parseQueryResults(resps);\n                } else {\n                    const req = reqs.shift();\n                    return this.backendSrv.datasourceRequest(makeDataSourceRequest(req))\n                        .then(intermdiateFn(req.device, req.field));\n                }\n            }\n        }\n\n        const req = reqs.shift();\n        return this.backendSrv.datasourceRequest(makeDataSourceRequest(req))\n            .then(intermdiateFn(req.device, req.field));\n    }\n\n    // Required\n    // Used for testing datasource in datasource configuration pange\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + \"/v1/ping\",\n            method: \"GET\"\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working.\", title: \"Success\" };\n            }\n        });\n    }\n\n    /**\n     * Get the list of devices for a namespace\n     **/\n    deviceQuery(options) {\n        const ns = options.namespace;\n        return this.backendSrv.datasourceRequest({\n            url: this.url + makeDataUrl(ns, \"device_id\") + \"?limit_by=device_id,1&limit=1000\",\n            data: options,\n            method: \"GET\",\n            headers: this.headers\n        }).then(result => {\n            const {values} = result.data.result[0];\n            const sorted = values.sort((a, b) => {\n                return a[1].localeCompare(b[1]);\n            });\n            sorted.unshift([null, ALL_DEVICES])\n            return _.map(sorted, (row) => {\n                return {text: row[1], value: row[1]};\n            });\n        });\n    }\n\n    fieldQuery(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + makeDataUrl(\"input\")+ \"?limit=1\",\n            data: options,\n            method: \"GET\",\n            headers: this.headers\n        }).then(result => {\n            const {fields} = result.data.result[0];\n            return _.map(fields.slice(1), (f) => {\n                return {text: f, value: f};\n            });\n        });\n    }\n\n    namespaceQuery(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + NAMESPACES_URL,\n            data: options,\n            method: \"GET\",\n            headers: this.headers\n        }).then(result => {\n            const {namespaces} = result.data;\n            return _.map(namespaces, (ns) => {\n                return {text: ns.namespace_name, value: ns.namespace_name};\n            });\n        });\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.target !== DEFAULT_SELECT_FIELD\n                && target.namespace !== DEFAULT_SELECT_NS\n                && target.device_id !== DEFAULT_DEVICE;\n        });\n\n        var targets = _.map(options.targets, target => {\n            const wheres = [];\n            if (target.wheres) {\n                for (let i = 0; i < target.wheres.length; i++) {\n                    const row = target.wheres[i];\n                    if (row.length > 1 && row[0].value !== DEFAULT_WHERE) {\n                        wheres.push(row[0].value);\n                    }\n                }\n            }\n\n            const group_by = !target.group_by_field ? null : {\n                field: target.group_by_field,\n                operator: target.group_by_operator\n            };\n\n            return {\n                target: this.templateSrv.replace(target.target),\n                namespace: this.templateSrv.replace(target.namespace),\n                device_id: this.templateSrv.replace(target.device_id),\n                group_by: group_by,\n                wheres: wheres,\n                interval: target.interval,\n                refId: target.refId,\n                hide: target.hide\n            };\n        });\n\n        options.targets = targets;\n\n        return options;\n    }\n}\n"]}